# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  # Exclude generated files from analysis
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "**/*.drift.dart"
    - "build/**"
    - "lib/generated_plugin_registrant.dart"
  
  # Enable stricter analysis
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

linter:
  rules:
    # Error rules - these cause build failures
    avoid_print: true
    avoid_web_libraries_in_flutter: true
    
    # Style rules for consistency
    prefer_single_quotes: true
    prefer_const_constructors: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    prefer_final_fields: true
    prefer_final_locals: true
    prefer_final_in_for_each: true
    
    # Security & performance
    avoid_dynamic_calls: true
    avoid_slow_async_io: true
    cancel_subscriptions: true
    close_sinks: true
    
    # Code quality
    avoid_redundant_argument_values: true
    avoid_returning_null_for_void: true
    avoid_unused_constructor_parameters: true
    prefer_relative_imports: true
    require_trailing_commas: true
    sort_child_properties_last: true
    use_super_parameters: true
    
    # Documentation
    public_member_api_docs: false  # Disabled for now, enable when codebase matures

# Dart Code Metrics configuration
dart_code_metrics:
  anti-patterns:
    - long-method
    - long-parameter-list
  metrics:
    cyclomatic-complexity: 15
    maximum-nesting-level: 5
    number-of-parameters: 4
    source-lines-of-code: 50
  rules:
    - avoid-dynamic
    - avoid-missing-enum-constant-in-map
    - avoid-nested-conditional-expressions
    - avoid-non-null-assertion
    - avoid-throw-in-catch-block
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - newline-before-return
    - no-boolean-literal-compare
    - no-empty-block
    - prefer-conditional-expressions
    - prefer-first
    - prefer-last
