rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // HRV readings - user-isolated collection
      match /hrv_readings/{readingId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // Validate document structure for HRV readings
        allow create: if request.auth != null 
          && request.auth.uid == userId
          && isValidHrvDocument(request.resource.data);
        
        allow update: if request.auth != null 
          && request.auth.uid == userId
          && isValidHrvDocument(request.resource.data)
          && resource.data.userId == request.auth.uid;
      }
      
      // User profile and settings - user-isolated
      match /profile {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        allow create: if request.auth != null 
          && request.auth.uid == userId
          && isValidUserProfile(request.resource.data);
        
        allow update: if request.auth != null 
          && request.auth.uid == userId
          && isValidUserProfile(request.resource.data)
          && resource.data.userId == request.auth.uid;
      }
      
      // Sync operations queue - user-isolated
      match /sync_queue/{operationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Validation functions
function isValidHrvDocument(data) {
  return data.keys().hasAll(['id', 'encryptedHrvData', 'timestamp', 'createdAt', 'updatedAt', 'userId', 'version'])
    && data.userId is string
    && data.id is string
    && data.timestamp is timestamp
    && data.createdAt is timestamp
    && data.updatedAt is timestamp
    && data.version is int
    && data.version >= 1
    && data.encryptedHrvData is map
    && data.encryptedHrvData.keys().hasAll(['encryptedData', 'iv', 'salt'])
    && data.encryptedHrvData.encryptedData is string
    && data.encryptedHrvData.iv is string
    && data.encryptedHrvData.salt is string;
}

function isValidUserProfile(data) {
  return data.keys().hasAll(['userId', 'lastSyncAt', 'createdAt', 'updatedAt', 'syncEnabled'])
    && data.userId is string
    && data.lastSyncAt is timestamp
    && data.createdAt is timestamp
    && data.updatedAt is timestamp
    && data.syncEnabled is bool;
}